function(_cforge_unit_test_fn)
    # TODO Use TEST_SUITE and TEST_CASE to automatically search for the scripts
    set(ARG_TEST_SHALL_FAIL @ARG_TEST_SHALL_FAIL@)
    set(ARG_TEST_SUITE @ARG_TEST_SUITE@)
    set(ARG_TEST_CASE @ARG_TEST_CASE@)
    set(ARG_TEST_SCRIPT @ARG_TEST_SCRIPT@)
    set(ARG_VERIFY_SCRIPT @ARG_VERIFY_SCRIPT@)

    set(SCRIPT_ID "${CFORGE_UNIT_PROJECT}__${ARG_TEST_SUITE}__${ARG_TEST_CASE}")

    # Run test phase

    if(ARG_TEST_SCRIPT)
        set(CFORGE_UNIT_CURRENT_TEST_OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${SCRIPT_ID}.test.output.txt)
        set(CFORGE_UNIT_CURRENT_TEST_ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/${SCRIPT_ID}.test.error.txt)
        get_filename_component(SCRIPT_DIRECTORY "${ARG_TEST_SCRIPT}" DIRECTORY)
        execute_process(
            COMMAND ${CMAKE_COMMAND} -P ${ARG_TEST_SCRIPT}
            WORKING_DIRECTORY "${SCRIPT_DIRECTORY}"
            OUTPUT_FILE ${CFORGE_UNIT_CURRENT_TEST_OUTPUT_FILE}
            ERROR_FILE ${CFORGE_UNIT_CURRENT_TEST_ERROR_FILE}
            RESULT_VARIABLE TEST_RESULT
        )
        if(NOT ARG_TEST_SHALL_FAIL AND NOT TEST_RESULT EQUAL 0)
            # Script/command failed but was expected to pass
            message(SEND_ERROR "Test failed with code ${TEST_RESULT} (expected: code == 0)")
            set(TEST_FAILED YES)
        elseif(ARG_TEST_SHALL_FAIL AND TEST_RESULT EQUAL 0)
            # Script/command passed but was expected to fail
            message(SEND_ERROR "Test failed with code ${TEST_RESULT} (expected: code != 0)")
            set(TEST_FAILED YES)
        endif()
    endif()

    # Run verification phase

    if(ARG_VERIFY_SCRIPT)
        set(CFORGE_UNIT_CURRENT_VERIFY_OUTPUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${SCRIPT_ID}.verify.output.txt)
        set(CFORGE_UNIT_CURRENT_VERIFY_ERROR_FILE ${CMAKE_CURRENT_BINARY_DIR}/${SCRIPT_ID}.verify.error.txt)
        get_filename_component(SCRIPT_DIRECTORY "${ARG_VERIFY_SCRIPT}" DIRECTORY)
        execute_process(
            COMMAND ${CMAKE_COMMAND}
                -D CFORGE_UNIT_CURRENT_TEST_OUTPUT_FILE=${CFORGE_UNIT_CURRENT_TEST_OUTPUT_FILE}
                -D CFORGE_UNIT_CURRENT_TEST_ERROR_FILE=${CFORGE_UNIT_CURRENT_TEST_ERROR_FILE}
                -P ${ARG_VERIFY_SCRIPT}
            WORKING_DIRECTORY "${SCRIPT_DIRECTORY}"
            OUTPUT_FILE ${CFORGE_UNIT_CURRENT_VERIFY_OUTPUT_FILE}
            ERROR_FILE ${CFORGE_UNIT_CURRENT_VERIFY_ERROR_FILE}
            RESULT_VARIABLE VERIFY_RESULT
        )
        if(VERIFY_RESULT AND NOT VERIFY_RESULT EQUAL 0)
            set(VERIFY_FAILED YES)
        endif()
    endif()

    # Print test verdict

    if(TEST_FAILED OR VERIFY_FAILED)
        _cforge_unit_report_verdict_failed(${ARG_TEST_SUITE} ${ARG_TEST_CASE})
    else()
        _cforge_unit_report_verdict_passed(${ARG_TEST_SUITE} ${ARG_TEST_CASE})
    endif()
endfunction()
