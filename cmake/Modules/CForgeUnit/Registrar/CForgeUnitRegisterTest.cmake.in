# Test-specific variables.
set(CFORGE_UNIT_CURRENT_TEST_ID @CFORGE_UNIT_CURRENT_TEST_ID@)
set(CFORGE_UNIT_CURRENT_TEST_SCRIPT @CFORGE_UNIT_CURRENT_TEST_SCRIPT@)
set(CFORGE_UNIT_CURRENT_TEST_BINARY_DIR @CFORGE_UNIT_CURRENT_TEST_BINARY_DIR@)
set(TEST_SHALL_FAIL "@ARG_SHALL_FAIL@")
set(TEST_PASS_REGEX "@ARG_PASS_REGEX@")
set(TEST_FAIL_REGEX "@ARG_FAIL_REGEX@")
set(TEST_IS_COVERAGE "@TEST_IS_COVERAGE@")

# CMake's trace mechanism is used for test coverage reporting
if(NOT TEST_IS_COVERAGE)
    set(TRACE_OPTIONS --trace --trace-redirect=${CFORGE_UNIT_CURRENT_TEST_BINARY_DIR}/cforge-unit-coverage-traces.txt)
endif()

add_test(
    NAME "${CFORGE_UNIT_CURRENT_TEST_ID}"
    COMMAND ${CMAKE_COMMAND}
        -C "${CFORGE_UNIT_CURRENT_TEST_BINARY_DIR}/ContextCache.cmake"
        -S "${CFORGE_UNIT_CURRENT_TEST_BINARY_DIR}"
        -B "${CFORGE_UNIT_CURRENT_TEST_BINARY_DIR}/build"
        ${TRACE_OPTIONS}
    COMMAND_EXPAND_LISTS
)
if(TEST_SHALL_FAIL)
    set_tests_properties("${CFORGE_UNIT_CURRENT_TEST_ID}" PROPERTIES WILL_FAIL TRUE)
endif()
if(TEST_PASS_REGEX)
    set_tests_properties("${CFORGE_UNIT_CURRENT_TEST_ID}" PROPERTIES PASS_REGULAR_EXPRESSION "${TEST_PASS_REGEX}")
endif()
if(TEST_FAIL_REGEX)
    set_tests_properties("${CFORGE_UNIT_CURRENT_TEST_ID}" PROPERTIES FAIL_REGULAR_EXPRESSION "${TEST_FAIL_REGEX}")
endif()
if(TEST_IS_COVERAGE)
    # This test is the coverage analysis and will be a run after all other tests
    set_tests_properties("${CFORGE_UNIT_CURRENT_TEST_ID}" PROPERTIES FIXTURES_CLEANUP Coverage)
else()
    # This is an ordinary test and must have Coverage as a fixture to support code coverage reporting
    # If coverage is not enabled, the fixture will not be defined and the requirement below will be silently ignored
    set_tests_properties("${CFORGE_UNIT_CURRENT_TEST_ID}" PROPERTIES FIXTURES_REQUIRED Coverage)
endif()
